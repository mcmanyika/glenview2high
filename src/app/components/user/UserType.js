import { useState, useEffect } from 'react';
import { ref, set } from 'firebase/database';
import { database } from '../../../../utils/firebaseConfig'; // Adjust the path as needed
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import { useRouter } from 'next/router';

const UserTypeSelector = ({ userEmail }) => {
  const router = useRouter();

  // Initialize the state for form data with status default to 'Inactive'
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    gender: '',
    dateOfBirth: '',
    phone: '',
    userType: '',
    email: userEmail || '',
    studentClassLevel: '',
    userID: '', // Changed from id to userID
    status: 'Inactive',
  });

  const generateId = (userType) => {
    const prefix = {
      student: 'ADM',
      teacher: 'TCHR',
      staff: 'STFF',
      parent: 'PRNT',
      contractor: 'CNTR',
    };

    const randomNum = Math.floor(100000 + Math.random() * 900000).toString(); // Generates a 6-digit number
    const userPrefix = prefix[userType];

    if (!userPrefix) {
      toast.error('Invalid user type for ID generation');
      return '';
    }

    return `${userPrefix}-${randomNum}`;
  };

  useEffect(() => {
    if (formData.userType) {
      const autoGeneratedId = generateId(formData.userType);
      console.log("Generated ID: ", autoGeneratedId); // Trace ID generation
      setFormData((prevFormData) => ({
        ...prevFormData,
        userID: autoGeneratedId, // Updated to userID
      }));
    }
  }, [formData.userType]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prevFormData) => ({
      ...prevFormData,
      [name]: value,
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
  
    if (
      formData.email &&
      formData.userType &&
      formData.firstName &&
      formData.lastName &&
      formData.gender &&
      formData.phone
    ) {
      try {
        const userRef = ref(database, `userTypes/${formData.userID}`); // Updated to userID
        await set(userRef, formData);
        toast.success('User data saved successfully', {
          position: 'bottom-center',
        });
  
        // Reset form data and generate a new ID based on the selected userType
        setFormData((prevFormData) => ({
          ...prevFormData,
          firstName: '',
          lastName: '',
          gender: '',
          dateOfBirth: '',
          phone: '',
          userType: '',
          studentClassLevel: '',
          userID: generateId(prevFormData.userType), // Updated to userID
          status: 'Inactive',
        }));
      } catch (error) {
        toast.error('Error saving user data: ' + error.message);
        console.error('Error saving user data: ', error);
      } finally {
        if (router) {
          await router.push('/admin/dashboard');  // Ensure asynchronous navigation
        }
      }
    } else {
      toast.warning('Please fill in all required fields');
    }
  };

  return (
    <div className="p-4 bg-white shadow-md rounded-md">
      <h2 className="text-2xl font-semibold mb-4">User Details Form</h2>
      <form onSubmit={handleSubmit}>
        <div className="grid grid-cols-1 gap-4 mb-4">
          <div>
            <input
              type="text"
              name="firstName"
              value={formData.firstName}
              onChange={handleChange}
              className="w-full p-2 border border-gray-300 rounded"
              placeholder="First Name"
              required
            />
          </div>
          <div>
            <input
              type="text"
              name="lastName"
              value={formData.lastName}
              onChange={handleChange}
              className="w-full p-2 border border-gray-300 rounded"
              placeholder="Last Name"
              required
            />
          </div>
          <div>
            <select
              name="gender"
              value={formData.gender}
              onChange={handleChange}
              className="w-full p-2 border border-gray-300 rounded"
              required
            >
              <option value="" disabled>Select gender...</option>
              <option value="male">Male</option>
              <option value="female">Female</option>
            </select>
          </div>
          <div>
            <input
              type="tel"
              name="phone"
              value={formData.phone}
              onChange={handleChange}
              className="w-full p-2 border border-gray-300 rounded"
              placeholder="Phone Number"
              required
            />
          </div>
          <div>
            <select
              name="userType"
              value={formData.userType}
              onChange={handleChange}
              className="w-full p-2 border border-gray-300 rounded"
              required
            >
              <option value="" disabled>Select user type...</option>
              <option value="student">Student</option>
              <option value="teacher">Teacher</option>
              <option value="staff">Staff</option>
              <option value="parent">Parent</option>
              <option value="contractor">Contractor</option>
            </select>
          </div>

          {formData.userType === 'student' && (
            <>
              <div className="text-left text-sm">
                <label>Date Of Birth</label>
                <input
                  type="date"
                  name="dateOfBirth"
                  value={formData.dateOfBirth}
                  onChange={handleChange}
                  className="w-full p-2 border border-gray-300 rounded"
                />
              </div>
              <div>
                <select
                  name="studentClassLevel"
                  value={formData.studentClassLevel}
                  onChange={handleChange}
                  className="w-full p-2 border border-gray-300 rounded"
                >
                  <option value="" disabled>Select Class Level...</option>
                  <option value="Form 1">Form 1</option>
                  <option value="Form 2">Form 2</option>
                  <option value="O Level">O Level</option>
                  <option value="A Level">A Level</option>
                </select>
              </div>
            </>
          )}

          {/* Hidden fields */}
          <input type="hidden" name="status" value={formData.status} />
          <input type="hidden" name="userID" value={formData.userID} /> {/* Updated to userID */}

          <div>
            <input
              type="hidden"
              name="email"
              value={formData.email}
              readOnly
              className="w-full p-2 border border-gray-300 rounded bg-gray-100 cursor-not-allowed"
              placeholder="Email"
            />
          </div>
        </div>
        <button type="submit" className="p-2 bg-main text-white rounded hover:bg-blue-600">
          Submit
        </button>
      </form>
      <ToastContainer />
    </div>
  );
};

export default UserTypeSelector;
