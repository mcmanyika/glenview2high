import { useState, useEffect } from 'react';
import { ref, set, get } from 'firebase/database';
import { database } from '../../../../utils/firebaseConfig'; // Adjust the path as needed
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import { useRouter } from 'next/router';

const UserTypeSelector = ({ userEmail }) => {
  const router = useRouter();

  // Initialize form state
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    companyName: '',
    typeOfService: '',
    dateOfBirth: '',
    phone: '',
    countryCode: '+263',
    userType: '',
    email: userEmail || '',
    studentClassLevel: '',
    userID: '',
    status: 'Inactive',
    accessLevel: 1, // Add default access level
  });

  // State for loading and error tracking
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [errorMessage, setErrorMessage] = useState('');

  const generateId = (userType) => {
    const prefix = {
      student: 'ADM',
      teacher: 'TCHR',
      staff: 'STFF',
      parent: 'PRNT',
      contractor: 'CNTR',
      alumni: 'ALUM',
    };

    const randomNum = Math.floor(100000 + Math.random() * 900000).toString();
    const userPrefix = prefix[userType];

    if (!userPrefix) {
      toast.error('Invalid user type for ID generation');
      return '';
    }
    return `${userPrefix}-${randomNum}`;
  };

  useEffect(() => {
    if (formData.userType) {
      const autoGeneratedId = generateId(formData.userType);
      setFormData((prevFormData) => ({
        ...prevFormData,
        userID: autoGeneratedId,
      }));
    }
  }, [formData.userType]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    
    // Updated phone handling - ensure it starts with 0
    if (name === 'phone') {
      let phoneValue = value;
      if (phoneValue && !phoneValue.startsWith('0')) {
        phoneValue = '0' + phoneValue;
      }
      setFormData(prev => ({
        ...prev,
        phone: phoneValue
      }));
      return;
    }

    setFormData(prevFormData => ({
      ...prevFormData,
      [name]: value,
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);
    setErrorMessage(''); // Reset error message

    // Check specifically for first name and last name
    if (!formData.firstName.trim() || !formData.lastName.trim()) {
      toast.warning('First name and last name are required');
      setIsSubmitting(false);
      return;
    }

    try {
      // Check if user already exists
      const usersRef = ref(database, 'userTypes');
      const snapshot = await get(usersRef);
      const existingUsers = snapshot.val() || {};
      
      const userExists = Object.values(existingUsers).some(
        user => user.email === formData.email
      );

      if (userExists) {
        toast.error('You have already submitted your details');
        setIsSubmitting(false);
        return;
      }

      if (
        formData.email &&
        formData.userType &&
        formData.firstName &&
        formData.lastName &&
        (formData.userType !== 'contractor' || (formData.companyName && formData.typeOfService)) &&
        formData.phone
      ) {
        const createdAt = new Date().toISOString();
        const userRef = ref(database, `userTypes/${formData.userID}`);
        await set(userRef, {
          ...formData,
          createdAt,
        });
        toast.success('User data saved successfully', {
          position: 'bottom-center',
        });

        // Redirect to admin dashboard after successful submission
        router.push('/admin/dashboard');

        // Reset form data
        setFormData((prevFormData) => ({
          ...prevFormData,
          firstName: '',
          lastName: '',
          companyName: '',
          typeOfService: '',
          dateOfBirth: '',
          phone: '',
          userType: '',
          studentClassLevel: '',
          userID: generateId(prevFormData.userType),
          status: 'Inactive',
        }));
      } else {
        toast.warning('Please fill in all required fields');
        setIsSubmitting(false);
      }
    } catch (error) {
      const errorMsg = error.message || 'Error checking/saving user data';
      setErrorMessage(errorMsg);
      toast.error(errorMsg);
      console.error('Error: ', error);
      setIsSubmitting(false);
    }
  };

  const handleUserTypeSelect = (type) => {
    setFormData((prevFormData) => ({
      ...prevFormData,
      userType: type,
    }));
  };

  return (
    <>
      <div className="background-image">
        <div className="overlay"></div>
      </div>
      <div className="relative p-4">
        <div className="bg-white/90 shadow-md rounded-md p-4">
          <h2 className="text-2xl font-semibold mb-4">Account Details Registration</h2>
          <form onSubmit={handleSubmit}>
            <div className="grid grid-cols-1 gap-4 mb-4">
              <div>
                <input
                  type="text"
                  name="firstName"
                  value={formData.firstName}
                  onChange={handleChange}
                  className="w-full p-2 border border-gray-300 rounded"
                  placeholder="First Name"
                  required
                />
              </div>
              <div>
                <input
                  type="text"
                  name="lastName"
                  value={formData.lastName}
                  onChange={handleChange}
                  className="w-full p-2 border border-gray-300 rounded"
                  placeholder="Last Name"
                  required
                />
              </div>

              {/* Conditional fields for Contractor */}
              {formData.userType === 'contractor' ? (
                <>
                  <div>
                    <input
                      type="text"
                      name="companyName"
                      value={formData.companyName}
                      onChange={handleChange}
                      className="w-full p-2 border border-gray-300 rounded"
                      placeholder="Company Name"
                      required
                    />
                  </div>
                  <div>
                    <input
                      type="text"
                      name="typeOfService"
                      value={formData.typeOfService}
                      onChange={handleChange}
                      className="w-full p-2 border border-gray-300 rounded"
                      placeholder="Type of Service"
                      required
                    />
                  </div>
                </>
              ) : (
                <div>
                  <select
                    name="gender"
                    value={formData.gender}
                    onChange={handleChange}
                    className="w-full p-2 border border-gray-300 rounded"
                    required
                  >
                    <option value="">Select Gender...</option>
                    <option value="Female">Female</option>
                    <option value="Male">Male</option>
                  </select>
                </div>
              )}

              <div className="flex gap-2">
                <select
                  name="countryCode"
                  value={formData.countryCode}
                  onChange={handleChange}
                  className="w-24 p-2 border border-gray-300 rounded"
                  required
                >
                  <option value="+263">+263</option>
                  <option value="+27">+27</option>
                  <option value="+260">+260</option>
                  <option value="+267">+267</option>
                  <option value="+258">+258</option>
                </select>
                <input
                  type="tel"
                  name="phone"
                  value={formData.phone}
                  onChange={handleChange}
                  className="flex-1 p-2 border border-gray-300 rounded"
                  placeholder="Phone Number"
                  required
                />
              </div>

              <div className="flex flex-col mb-4">
                <label className="text-lg font-semibold mb-2">Specify your Account</label>
                <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-2">
                  {/* UserType Options */}
                  {['student', 'teacher', 'staff', 'parent', 'contractor'].map((type) => (
                    <div
                      key={type}
                      className={`cursor-pointer p-2 border border-gray-300 rounded text-center ${
                        formData.userType === type ? 'bg-main2' : ''
                      }`}
                      onClick={() => handleUserTypeSelect(type)}
                    >
                      {type.charAt(0).toUpperCase() + type.slice(1)}
                    </div>
                  ))}
                </div>
              </div>

              {/* Date of Birth field for student, staff, or teacher */}
              {(formData.userType === 'student' || formData.userType === 'staff' || formData.userType === 'teacher') && (
                <div>
                  <label>Date Of Birth</label>
                  <input
                    type="date"
                    name="dateOfBirth"
                    value={formData.dateOfBirth}
                    onChange={handleChange}
                    className="w-full p-2 border border-gray-300 rounded"
                  />
                </div>
              )}

              {/* Student Class Level (keep existing student-specific field) */}
              {formData.userType === 'student' && (
                <div>
                  <select
                    name="studentClassLevel"
                    value={formData.studentClassLevel}
                    onChange={handleChange}
                    className="w-full p-2 border border-gray-300 rounded"
                  >
                    <option value="" disabled>Select Class Level...</option>
                    <option value="Form 1">Form 1</option>
                    <option value="Form 2">Form 2</option>
                    <option value="O' Level">O Level</option>
                    <option value="A' Level">A Level</option>
                  </select>
                </div>
              )}

              {/* Access Level field for staff */}
              {formData.userType === 'staff' && (
                <div>
                  <input
                    type="hidden"
                    name="accessLevel"
                    value={formData.accessLevel}
                  />
                </div>
              )}

              {/* Submit button */}
              <button type="submit" className="mt-4 bg-blue-500 text-white py-2 rounded" disabled={isSubmitting}>
                {isSubmitting ? 'Submitting...' : 'Submit'}
              </button>
            </div>
          </form>

          {/* Error message display */}
          {errorMessage && <div className="text-red-500 mt-2">{errorMessage}</div>}
          <ToastContainer />
        </div>
      </div>
    </>
  );
};

export default UserTypeSelector;
